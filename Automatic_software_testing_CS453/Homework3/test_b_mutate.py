'''Mutate tests.

These tests evaluate the well-formedness of mutant diffs generated by 
the tool. Diffs are compared with those generated from a reference solution.
'''

import os
from test_config import *

def get_mut_of_type(mut_dir, mut_type):
    '''Gets all mutants of mut_type from mut_dir.'''
    return list(filter(
        lambda x: mut_type in x,
        os.listdir(mut_dir)
    ))

def compare_names(list1, list2):
    '''Checks if all names in the list are the same.'''
    return set(list1) == set(list2)

def test_conditionals_boundary():
    mut_type = 'CONDITIONALS-BOUNDARY'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_increments():
    mut_type = 'INCREMENTS'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_invert_negs():
    mut_type = 'INVERT-NEGS'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_math():
    mut_type = 'MATH'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_negate_conditionals():
    mut_type = 'NEGATE-CONDITIONALS'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_returns():
    mut_type = 'RETURNS'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_obbn():
    mut_type = 'OBBN'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'

def test_crcr():
    mut_type = 'CRCR'
    student_foo_muts = sorted(get_mut_of_type(STU_FOO_MUT_DIR, mut_type))
    ref_foo_muts = sorted(get_mut_of_type(REF_FOO_MUT_DIR, mut_type))
    assert compare_names(student_foo_muts, ref_foo_muts), 'Check the number and naming of your mutants for foo.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_foo_muts, ref_foo_muts):
        with open(os.path.join(STU_FOO_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_FOO_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_foo_muts[wrong_idx]} is not equivalent.'

    student_bar_muts = sorted(get_mut_of_type(STU_BAR_MUT_DIR, mut_type))
    ref_bar_muts = sorted(get_mut_of_type(REF_BAR_MUT_DIR, mut_type))
    assert compare_names(student_bar_muts, ref_bar_muts), 'Check the number and naming of your mutants for bar.'

    mut_sames = []
    for student_mut, ref_mut in zip(student_bar_muts, ref_bar_muts):
        with open(os.path.join(STU_BAR_MUT_DIR, student_mut)) as smf:
            with open(os.path.join(REF_BAR_MUT_DIR, ref_mut)) as rmf:
                mut_sames.append(smf.read() == rmf.read())
    
    all_right = all(mut_sames)
    wrong_idx = -1 if all_right else mut_sames.index(False)
    assert all_right, f'The content of {ref_bar_muts[wrong_idx]} is not equivalent.'